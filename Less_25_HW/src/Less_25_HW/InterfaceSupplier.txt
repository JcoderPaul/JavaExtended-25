******* Interface Supplier - Интерфейс Supplier *******

@FunctionalInterface
public interface Supplier<T>

Supplier<T> не принимает никаких аргументов, но должен возвращать объект типа <T>

Параметры типа: T - тип результатов, предоставляемых текущим поставщиком
Интерфейс: Функциональный интерфейс, поэтому его можно использовать в
           качестве цели назначения для лямбда-выражения или ссылки на
           метод (method reference).

Интерфейс-репрезентация поставщика результатов.
Не имеет требования, чтобы каждый раз при вызове поставщика возвращался
новый или некий особый результат.

Функциональный метод интерфейса Supplier<T> - *.get() - получает результат.

Пример:
---------------------------------------------------------------------------
 String t = "One";
 Supplier<String> supplierStr = () -> t.toUpperCase();
 System.out.println(supplierStr.get());
 // На экран: ONE
---------------------------------------------------------------------------

Supplier — это простой интерфейс, указывающий, что данная реализация является
поставщиком какого-то результата. Повторим, данный интерфейс, не накладывает
никаких дополнительных ограничений, которые реализация поставщика должна
возвращать при каждом новом получении результата.

У поставщика есть только один метод get() и нет никаких других методов по
умолчанию или статических методов.

Пример:
---------------------------------------------------------------------------
public void supplier() {
    Supplier<Double> doubleSupplier1 = () -> Math.random();
    DoubleSupplier doubleSupplier2 = Math::random;

    System.out.println(doubleSupplier1.get());
    System.out.println(doubleSupplier2.getAsDouble());
}
---------------------------------------------------------------------------

Интерфейс Supplier имеет свои примитивные варианты, такие как IntSupplier,
DoubleSupplier и т.д.

Обратите внимание, что имя метода - get() используется для универсального
интерфейса поставщика. Однако для примитивных вариантов этот метод
соответствует примитивному типу:
- IntSupplier -> int getAsInt();
- DoubleSupplier -> double getAsDouble();
- LongSupplier -> long getAsLong();
- BooleanSupplier -> boolean getAsBoolean();

Одно из основных применений этого интерфейса это использование для включения
отложенного выполнения. Это означает отсрочку выполнения до тех пор, пока оно
не понадобится.

Например, в классе Optional есть метод orElseGet. Этот метод срабатывает,
если у option нет данных.

Например:
---------------------------------------------------------------------------
public void supplierWithOptional() {
    Supplier<Double> doubleSupplier = () -> Math.random();
    Optional<Double> optionalDouble = Optional.empty();
    System.out.println(optionalDouble.orElseGet(doubleSupplier));
}
---------------------------------------------------------------------------