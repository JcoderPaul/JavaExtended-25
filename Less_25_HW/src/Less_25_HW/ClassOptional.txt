******* Class Optional - Класс Optional *******

public final class Optional<T> extends Object

Объект-контейнер, который может содержать или не содержать
ненулевое значение. Если значение присутствует, isPresent()
вернет true, а get() вернет значение.

Предоставляются дополнительные методы, которые зависят от
наличия или отсутствия содержащегося значения, такие как
orElse() (возвращает значение по умолчанию, если значение
отсутствует) и ifPresent() (выполняет блок кода, если
значение присутствует).

Использование операций с идентификацией (включая ссылочное
равенство (==), идентификационный хэш-код или синхронизацию)
в экземплярах Optional может привести к непредсказуемым
результатам, и его следует избегать.

******* МЕТОДЫ *******

- static <T> Optional<T> empty() - Возвращает пустой необязательный экземпляр.

- boolean equals(Object obj) - Указывает, является ли какой-либо другой объект
  «равным» этому необязательному.

- Optional<T> filter(Predicate<? super T> predicate) - Если значение присутствует,
  и значение соответствует заданному предикату, верните необязательный элемент,
  описывающий значение, в противном случае верните пустой необязательный элемент.

- <U> Optional<U> flatMap(Function<? super T,Optional<U>> mapper) - Если значение
  присутствует, примените к нему предоставленную функцию сопоставления с факультативом,
  верните этот результат, в противном случае верните пустое факультативное значение.

- T get() - Если значение присутствует в этом необязательном, возвращает значение,
  в противном случае генерирует исключение NoSuchElementException.

- int hashCode() - Возвращает значение хэш-кода текущего значения, если оно есть,
  или 0 (ноль), если значение отсутствует.

- void ifPresent(Consumer<? super T> consumer) - Если значение присутствует,
  вызовите указанного потребителя со значением, в противном случае ничего не делайте.

- boolean isPresent() - Возвращает true, если присутствует значение, иначе false.

- <U> Optional<U> map(Function<? super T,? extends U> mapper) - Если значение
  присутствует, примените к нему предоставленную функцию сопоставления, и, если
  результат не равен нулю, верните необязательный параметр, описывающий результат.

- static <T> Optional<T> of(T value) - Возвращает необязательный элемент с указанным
  текущим ненулевым значением.

- static <T> Optional<T> ofNullable(T value) - Возвращает необязательный элемент,
  описывающий указанное значение, если он не равен нулю, в противном случае возвращает
  пустой необязательный элемент.

- T orElse(T other) - Вернуть значение, если оно присутствует, иначе вернуть другое.

- T orElseGet(Supplier<? extends T> other) - Верните значение, если оно присутствует,
  в противном случае вызовите другое и верните результат этого вызова.

- <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier) - Верните
  содержащееся значение, если оно присутствует, в противном случае создайте исключение,
  которое будет создано предоставленным поставщиком.

- String toString() - Возвращает непустое строковое представление этого опционала,
  пригодное для отладки.

--------------------------------------------------------------------------------------------
Более подробно см. https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html
--------------------------------------------------------------------------------------------
