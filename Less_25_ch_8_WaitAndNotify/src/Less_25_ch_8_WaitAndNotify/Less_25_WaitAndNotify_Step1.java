package Less_25_ch_8_WaitAndNotify;

import Less_25_ch_8_WaitAndNotify.MyClasses.*;

/**
 * Рассмотрим, как мы можем использовать методы *.wait() и *.notify().
 * Задача - "Производитель-Потребитель" ("Producer-Consumer"):
 * пока производитель не произвел продукт, потребитель не может его купить.
 * Пусть производитель должен произвести 5 товаров, соответственно потребитель
 * должен их все купить. Но при этом одновременно на складе может находиться не
 * более 3 товаров.
 **/
public class Less_25_WaitAndNotify_Step1 {
    public static void main(String[] args) {
        /*
        Создаем три объекта магазин, производитель и потребитель.
        - Магазин (Store) стандартный класс с набором методов (синхронизированных
        на случай многопоточной работы)
        - Производитель (Producer) класс имплементирующий интерфейс Runnable
        */
        Store my_store = new Store();
        Producer producer = new Producer(my_store);
        Consumer consumer = new Consumer(my_store);

        /*
        Создаем потоки для производителя и потребителя.
        Расположение одного потока, относительно другого потока, в листинге программы
        значения не имеет. Producer может стартовать как раньше, так и позже Consumer,
        методы 'взять' и 'положить' в объекте 'Магазин' синхронизированы.
        */

        new Thread(producer).start();
        new Thread(consumer).start();
    }
}
