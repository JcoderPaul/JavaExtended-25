*** Завершение и прерывание потока ***

Обычно поток представляют как последовательный набор операций. После выполнения последней операции
поток завершается. Однако нередко имеет место и другая организация потока в виде бесконечного цикла.
Например, поток сервера в бесконечном цикле прослушивает определенный порт на предмет получения данных.
И в этом случае мы также можем предусмотреть механизм завершения потока.

Распространенный способ завершения потока представляет опрос логической переменной. И если она равна,
например, false, то поток завершает бесконечный цикл и заканчивает свое выполнение. Однако существуют
специальный метод.

*** Метод interrupt ***
Это способ вызова завершения или прерывания потока представляет метод interrupt(). Вызов этого метода
устанавливает у потока статус, что он прерван. Сам метод возвращает true, если поток может быть прерван,
в ином случае возвращается false.

При этом сам вызов этого метода НЕ завершает поток, он только устанавливает статус: (false/true) т.е. что
некто пытается остановить данный поток. Если такой запрос есть, то метод isInterrupted() класса Thread будет
возвращать значение true. Мы можем проверить значение возвращаемое данным методом и произвести некоторые
действия по прерыванию (или не прерыванию) потока на который "выписали заказ" - interrupt().

Если основная функциональность заключена в классе, который реализует интерфейс Runnable, то там можно
проверять статус потока с помощью метода Thread.currentThread().isInterrupted().
(см. пример Less_25_Interruption_Step2)

Однако при получении статуса потока с помощью метода isInterrupted() следует учитывать, что если мы
обрабатываем в цикле исключение InterruptedException в блоке catch, то при перехвате исключения статус
потока автоматически сбрасывается, и после этого isInterrupted будет возвращать false.

(см. пример Less_25_Interruption_Step3 - в данном примере, когда поток вызовет метод interrupt,
метод sleep сгенерирует исключение InterruptedException, и управление перейдет к блоку catch.
Но если мы проверим статус потока внутри блока catch, то увидим, что метод isInterrupted возвращает false.
Как вариант, в этом случае мы можем повторно прервать текущий поток, опять же вызвав метод interrupt().
Тогда при новой итерации цикла while метода isInterrupted возвратит true, и произойдет выход из цикла.)

