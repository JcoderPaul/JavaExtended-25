*** Методы интерфейса ExecutorService ***

- boolean awaitTermination(long timeout, TimeUnit unit)	- Блокирует (заставляет ждать) поток в котором он был
  вызван до тех пор, пока все задачи ExecutorService не завершат свое выполнение после запроса на завершение
  работы от метода *.shutdown(), например, или пока не наступит тайм-аут или не будет прерван текущий поток,
  в зависимости от того, что произойдет раньше;

- List<Future<T>> invokeAll (Collection<? extends Callable<T>> tasks) -	Выполнение задач с возвращением списка
  задач с их статусом и результатами завершения;

- List<Future<T>> invokeAll (Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) - Выполнение
  задач с возвращением списка задач с их статусом и результатами завершения в течение заданного времени;

- T invokeAny(Collection<? extends Callable<T>> tasks) - Выполнение задач с возвращением результата успешно
  выполненной задачи (т. е. без создания исключения), если таковые имеются;

- T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)	- Выполнение задач в течение
  заданного времени с возвращением результата успешно выполненной задачи (т. е. без создания исключения), если
  таковые имеются;

- boolean isShutdown() - Возвращает true, если исполнитель сервиса остановлен (shutdown);

- boolean isTerminated() - Возвращает true, если все задачи исполнителя сервиса завершены по команде остановки
  (shutdown);

- void shutdown() - Упорядоченное завершение работы, при котором ранее отправленные задачи выполняются, а новые
  задачи не принимаются;

- List<Runnable> shutdownNow() - Остановка всех активно выполняемых задач, остановка обработки ожидающих задач,
  возвращение списка задач, ожидающих выполнения;

- Future<T> submit(Callable<T> task) - Завершение выполнения задачи, возвращающей результат в виде
  объекта Future;

- Future<?> submit(Runnable task) - Завершение выполнения задачи, возвращающей объект Future, представляющий
  данную задачу;

- Future<T> submit(Runnable task, T result) - Завершение выполнения задачи, возвращающей объект Future,
  представляющий данную задачу;