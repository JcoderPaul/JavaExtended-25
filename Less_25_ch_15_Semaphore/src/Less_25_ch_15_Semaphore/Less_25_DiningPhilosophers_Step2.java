package Less_25_ch_15_Semaphore;
/*
Пример задачи Less_25_Semaphore_Step1 и Less_25_DiningPhilosophers_Step2
практически повторяют друг друга, только частично изменен код реализации
действующих объектов наследующих Thread.
*/

/**
 * Семафор — это средство для синхронизации доступа к какому-то ресурсу.
 * Его особенность заключается в том, что при создании механизма синхронизации
 * он использует счетчик. Счетчик указывает нам, сколько потоков одновременно
 * могут получать доступ к общему ресурсу.
 *
 * Семафоры в Java представлены классом Semaphore.
 * При создании объектов-семафоров мы можем использовать такие конструкторы:
 *
 * Semaphore(int permits)
 * Semaphore(int permits, boolean fair)
 *
 * В конструктор мы передаем:
 * int permits — начальное и максимальное значение счетчика. Т.е. сколько
 * потоков одновременно могут иметь доступ к общему ресурсу;
 *
 * boolean fair — для установления порядка, в котором потоки будут получать доступ.
 * Если fair = true, доступ предоставляется ожидающим потокам в том порядке,
 * в котором они его запрашивали. Если же он равен false, порядок будет определять
 * планировщик потоков.
 **/

import Less_25_ch_15_Semaphore.MyClasses.*;

import java.util.concurrent.Semaphore;

public class Less_25_DiningPhilosophers_Step2 {
    public static void main(String[] args) {
         /*
         Представим, что у нас есть 5 философов, которым нужно пообедать.
         При этом у нас есть один стол, и одновременно находиться за ним
         могут не более двух человек.

         Наша задача — накормить всех философов. Никто из них не должен
         остаться голодным, и при этом они не должны «заблокировать» друг
         друга при попытке сесть за стол (мы должны избежать deadlock).
         */
        Semaphore table_sem = new Semaphore(2);
        new Philosopher(table_sem,"Сократ").start();
        new Philosopher(table_sem,"Платон").start();
        new Philosopher(table_sem,"Аристотель").start();
        new Philosopher(table_sem,"Фалес").start();
        new Philosopher(table_sem,"Пифагор").start();

    }
}
